# 函数
一块具有独立功能的代码块，重复使用，那么往往就需要使用函数，使用函数把这块代码封装成一个整体
定义一次，调用n次
def sum2num(a,b) a、b是形参
sum2num（a，b）a、b是实参
返回值   但是返回值保不保存都可以  只要在函数有return一定有返回值，但是函数遇到return就直接退出了。如果一个函数中编写了多个return，
那么程序不会出现语法错误，但是由于函数结束，只执行第一个函数。
函数的类型：无参数无返回值  打印信息
          无参数有返回值  采集数据
          有参数无返回值  少见
          有参数有返回值  最常见
函数嵌套
函数的顺序对函数运行时有影响的，先定义再调用，在定义之前就调用，程序肯定挂。
如果函数重名，只调用最后那个函数，之前的重名函数就不调用了。

#局部变量 在函数里面定义的变量，它只在定义它的函数中有效，出了函数，就无效。函数里面的变量名相同也毫无影响的。形参也是局部变量。
#全局变量 在函数外面定义的变量，任何函数都可以访问，但是全局变量不能直接改。 但是加global num就可以改。
全局变量如果是不可变类型，那么必须加global才可以使用，但是全局变量如果是可变类型，那么不加global也可以使用，记住全局变量可以是
列表

可以在列表中添加变量，相当于把变量中的值赋给了列表中的元素

多个返回值如何处理？  列表、元组、字典都行

#缺省函数 调用函数可以少传参数，但是少传那个参数在函数中要有默认值，但是默认参数在函数参数列表中必须放在最后面，若你给默认参数赋
新值，则以新值为准。若指定参数，则可以越过缺省参数。
比如：a.sort（）里面是有缺省参数的，应用很广泛

#不定长参数 你传递的数据可以大于函数参数列表长度，单独参数变成元组，mm=44这种类型有名字给字典，无论实际传递是什么格式，只要是没名字
的就是元组，有名字的就是字典，而名字即mm就是key
def test(a,b,*args,**kwargs):
*args是一个元组   **kwargs是一个字典  至于*是规定

#引用  存放数字的那个地方的地址
可变类型与不可变类型。可变数据类型：列表、字典。不可变数据类型：数字、字符串、元组
若是数字，a、b都指向数字，若改a，则a的id就变了，不再指向原来的数字了；而在列表中，添加更改数据，数据的id也不变。
哈希表：在字典中，键被转化成唯一的值，而值则存放在键唯一标识的内存中，速度极快，属于一次性查找。
传实参的时候就是传数字的引用，也就是数字所在的地址的起始位置，传的任何东西都是引用，不是值。

#递归 一个函数调用了他自己本身，那么这样的函数就叫做递归函数
递归在内存中主要是使用栈的存储形式，先进的后出

#匿名函数 lambda
函数特别简单，只完成一个简单的功能
1.当作参数进行传递
2.在并不方便调用函数时可以使用匿名函数

#函数使用注意事项
函数名不能重名
函数里面的变量只能函数自己使用，因为这里面的变量只有在调用时才在内存中出现
1.可以使用全局变量
2.在另一个函数中调用一个函数，不过结果要return
